@implements IDisposable
@using Microsoft.AspNetCore.Identity
@using MiniLMS.Data
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">MiniLMS</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

                @if (isLoadingUser)
                {
                    @* Show basic navigation while loading user role *@
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="assignments">
                            <span class="bi bi-journal-text-nav-menu" aria-hidden="true"></span> Assignments
                        </NavLink>
                    </div>
                }
                else if (currentUser?.Role == UserRole.Learner || currentUser?.Role == UserRole.Admin)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="assignments">
                            <span class="bi bi-journal-text-nav-menu" aria-hidden="true"></span> Assignments
                        </NavLink>
                    </div>
                }

                @if (!isLoadingUser && (currentUser?.Role == UserRole.Manager || currentUser?.Role == UserRole.Admin))
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="progress">
                            <span class="bi bi-bar-chart-line-fill-nav-menu" aria-hidden="true"></span> Progress
                        </NavLink>
                    </div>
                }

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private ApplicationUser? currentUser;
    private bool isLoadingUser = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            isLoadingUser = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                currentUser = await UserManager.GetUserAsync(authState.User);
            }
        }
        catch (Exception)
        {
            // Handle potential DbContext issues gracefully
            currentUser = null;
        }
        finally
        {
            isLoadingUser = false;
            StateHasChanged();
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

